# .github/workflows/deploy1.yml
# .github/workflows/deploy1.yml
name: Deploy to VPS
on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: self-hosted  # Use your srv963397 runner

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create application directory
        run: |
          sudo mkdir -p /opt/your-app
          sudo chown $USER:$USER /opt/your-app

      - name: Copy application files
        run: |
          rsync -av --delete --exclude='.git' . /opt/your-app/

      - name: Create external Docker network
        run: |
          docker network create external_network_nginx || echo "Network already exists"

      - name: Create .env file with secrets
        run: |
          cd /opt/your-app
          cat > .env << EOF
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=${{ secrets.MYSQL_DATABASE }}
          MYSQL_USER=${{ secrets.MYSQL_USER }}
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          EOF
          echo "✓ Environment file created"

      - name: Stop existing containers gracefully
        run: |
          cd /opt/your-app
          if [ -f docker-compose.yml ] || [ -f compose.yml ]; then
            echo "Stopping existing containers..."
            docker compose down --remove-orphans || echo "No containers to stop"
          else
            echo "No compose file found, skipping container stop"
          fi

      - name: Verify Docker Compose file exists
        run: |
          cd /opt/your-app
          if [ -f docker-compose.yml ]; then
            echo "✓ Found docker-compose.yml"
            echo "Contents:"
            cat docker-compose.yml
          elif [ -f compose.yml ]; then
            echo "✓ Found compose.yml"
            echo "Contents:"
            cat compose.yml
          else
            echo "❌ No Docker Compose file found!"
            echo "Files in directory:"
            ls -la
            exit 1
          fi

      - name: Build and start containers with detailed logging
        run: |
          cd /opt/your-app
          echo "Building and starting containers..."
          docker compose up -d --build --force-recreate
          echo "✓ Containers started"

      - name: Wait for containers to be ready
        run: |
          echo "Waiting for containers to start..."
          sleep 30
          echo "Checking container status:"
          docker compose ps

      - name: Show detailed container information
        run: |
          cd /opt/your-app
          echo "=== Container Status ==="
          docker compose ps -a
          echo ""
          echo "=== Running Docker Containers ==="
          docker ps -a
          echo ""
          echo "=== Docker Networks ==="
          docker network ls

      - name: Show container logs for debugging
        if: always()  # Run even if previous steps fail
        run: |
          cd /opt/your-app
          echo "=== All Container Logs ==="
          docker compose logs --tail=50
          echo ""
          echo "=== Individual Container Logs ==="
          for container in $(docker compose ps -q); do
            container_name=$(docker inspect --format='{{.Name}}' $container | sed 's/\///')
            echo "--- Logs for $container_name ---"
            docker logs --tail=20 $container
            echo ""
          done

      - name: Test application connectivity
        run: |
          echo "Testing application connectivity..."
          
          # Test different ports that might be exposed
          for port in 8080 8081 3000 80 443; do
            echo "Testing port $port..."
            if curl -f -m 10 http://localhost:$port/actuator/health 2>/dev/null; then
              echo "✓ Health check successful on port $port"
              break
            elif curl -f -m 10 http://localhost:$port/ 2>/dev/null; then
              echo "✓ Application responding on port $port"
              break
            else
              echo "❌ No response on port $port"
            fi
          done
          
          # Show what's listening on ports
          echo "Ports in use:"
          ss -tlnp | grep -E ':(8080|8081|3000|80|443)' || echo "No services found on common ports"

      - name: Cleanup secrets
        if: always()  # Always run cleanup
        run: |
          cd /opt/your-app
          rm -f .env
          echo "✓ Secrets cleaned up"

      - name: Deployment summary
        if: always()
        run: |
          echo "=== DEPLOYMENT SUMMARY ==="
          echo "Timestamp: $(date)"
          echo "Working directory: $(pwd)"
          echo "Application directory: /opt/your-app"
          echo "Docker Compose status:"
          cd /opt/your-app
          docker compose ps || echo "Could not get compose status"